@model c_showcase.Models.Game.GameViewModel;

@{
    ViewData["Title"] = "Orb Clicker";
}

<div class="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-100 p-4 transition-colors">
    <div class="grid grid-cols-[1fr_2fr_1fr] gap-4 max-w-7xl mx-auto">

        <div class="bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-xl p-4 shadow space-y-4">
            <p>
                <span class="inline-block bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-300 text-sm font-semibold px-2 py-1 rounded-full">
                    <span id="orb-count">@Model.GameData.Resources</span>
                </span> 
                Orbs
            </p>
            <p class="text-s">
                <span id="resources-per-click" class="inline-block bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-300 text-s font-semibold px-2 py-1 rounded-full">
                    @Model.GameData.ResourcesPerClick
                </span>
                Orbs per click
            </p>
            <p>
                <span class="inline-block bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-300 text-sm font-semibold px-2 py-1 rounded-full">
                    @Model.GameData.ResourcesPerSecond
                </span>
                Orbs per second
            </p>
        </div>

        <div class="flex flex-col items-center justify-center text-center space-y-6">
            <div id="click-effects" class="relative w-full h-0 pointer-events-none"></div>
            @Html.Partial("./Partials/_OrbIcon")
        </div>

        <div class="bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-xl p-4 shadow space-y-4">
            <h2 class="text-sm font-semibold text-gray-500 dark:text-gray-300 uppercase tracking-wide">Upgrades</h2>
            <ul class="space-y-2 text-sm">
            @foreach (var upgrade in Model.AvailableUpgrades)
            {
                <li class="bg-indigo-50 dark:bg-indigo-900 border border-indigo-200 dark:border-indigo-700 p-2 rounded shadow">
                    <strong>@upgrade.Name</strong> â€” +@upgrade.ResourcesPerSecond/sec
                </li>
            }

            @if (!Model.GameData.GameDataUpgrades.Any())
            {
                <li class="text-gray-500 dark:text-gray-400 italic">No upgrades unlocked yet.</li>
            }
            </ul>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        let orbs = @Model.GameData.Resources;
        let pendingClicks = 0;

        document.getElementById("orb-icon").addEventListener("click", () => {
            pendingClicks += @Model.GameData.ResourcesPerClick;
            orbs += @Model.GameData.ResourcesPerClick;
            document.getElementById("orb-count").innerText = orbs;
        });

        setInterval(() => {
            if (pendingClicks > 0) {
                fetch('/Game/Save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ clicks: pendingClicks })
                })
                .then(response => response.json())
                .then(data => {
                    orbs = data.resources;
                    pendingClicks = 0;
                    document.getElementById("orb-count").innerText = orbs;
                });
            }
        }, 5000);

        document.getElementById('orb-icon').addEventListener('click', () => {
            const effectsContainer = document.getElementById('click-effects');
            const amount = parseInt(document.getElementById('resources-per-click')?.textContent || "1");

            const effect = document.createElement('div');
            effect.textContent = `+${amount}`;
            effect.className = 'float-up';
            effectsContainer.appendChild(effect);

            setTimeout(() => {
                effect.remove();
            }, 1000);
        });
    </script>
}
